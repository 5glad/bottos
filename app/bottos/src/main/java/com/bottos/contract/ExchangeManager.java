package com.bottos.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.0.1.
 */
public final class ExchangeManager extends Contract {
    private static final String BINARY = "6060604052341561000f57600080fd5b60038054600160a060020a03191633600160a060020a0316179055612a8d806100396000396000f3006060604052600436106100c15763ffffffff60e060020a60003504166302fce3c881146100c65780630919f3aa1461018e57806321e5b004146101ad578063259da968146101ce57806351f3076114610279578063562b78e8146102985780635cc469c0146102ee5780638ae4dfb81461031d578063900363b914610330578063a101dacd14610343578063abc2ea7a14610394578063c531f797146103f7578063da3b110714610416578063e08a668c146104f9578063fbbc574114610518575b600080fd5b34156100d157600080fd5b61011760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061052b95505050505050565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015357808201518382015260200161013b565b50505050905090810190601f1680156101805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019957600080fd5b610117600160a060020a0360043516610734565b34156101b857600080fd5b6101cc600160a060020a0360043516610999565b005b34156101d957600080fd5b6101cc600160a060020a036004803582169160248035909116919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496506109c895505050505050565b341561028457600080fd5b6101cc600160a060020a0360043516610c77565b34156102a357600080fd5b61011760046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505050923560ff169250610ca6915050565b34156102f957600080fd5b610301610f9f565b604051600160a060020a03909116815260200160405180910390f35b341561032857600080fd5b610117610fae565b341561033b57600080fd5b6103016111d3565b341561034e57600080fd5b61030160046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506111e295505050505050565b341561039f57600080fd5b6103e560046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506112b795505050505050565b60405190815260200160405180910390f35b341561040257600080fd5b610117600160a060020a0360043516611322565b341561042157600080fd5b6101cc60048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061149195505050505050565b341561050457600080fd5b6101cc600160a060020a0360043516611844565b341561052357600080fd5b610301611873565b610533612906565b600061053d612906565b6004846040518082805190602001908083835b6020831061056f5780518252601f199092019160209182019101610550565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020915061065384836000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106405780601f1061061557610100808354040283529160200191610640565b820191906000526020600020905b81548152906001019060200180831161062357829003601f168201915b505050505061188290919063ffffffff16565b156106f65760408051908101604052601781527f7b22746f74616c4e756d223a312c226974656d73223a5b0000000000000000006020820152925061069782611918565b90506106a9838263ffffffff611f2916565b92506106ef60408051908101604052600281527f5d7d0000000000000000000000000000000000000000000000000000000000006020820152849063ffffffff611f2916565b925061072d565b60408051908101604052600e81527f7b22746f74616c4e756d223a307d000000000000000000000000000000000000602082015292505b5050919050565b61073c612906565b600080610747612906565b600080610752612906565b600554955060009450848611156108d15760408051908101604052600b8152600080516020612a4283398151915260208201529350600092505b858310156108a35760046005848154811015156107a557fe5b9060005260206000209001604051808280546001816001161561010002031660029004801561080b5780601f106107e957610100808354040283529182019161080b565b820191906000526020600020905b8154815290600101906020018083116107f7575b505092835250506020016040519081900390206002810154909250600160a060020a0389811691161461083d57610898565b600083111561087457610871604080519081016040526001815260fa60020a600b026020820152859063ffffffff611f2916565b93505b61087d82611918565b905061088f848263ffffffff611f2916565b60019095019493505b60019092019161078c565b6108ce604080519081016040526001815260f860020a605d026020820152859063ffffffff611f2916565b93505b60408051908101604052806001815260200160f860020a607b02815250965061094461093760408051908101604052600881527f746f74616c4e756d0000000000000000000000000000000000000000000000006020820152879063ffffffff611f9216565b889063ffffffff611f2916565b965060008511156109625761095f878563ffffffff611f2916565b96505b61098d604080519081016040526001815260f860020a607d026020820152889063ffffffff611f2916565b98975050505050505050565b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6109d0612906565b6109d8612906565b6000806109eb868663ffffffff611f2916565b93506109f6846121b6565b92506004836040518082805190602001908083835b60208310610a2a5780518252601f199092019160209182019101610a0b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051908190039020600254909250600160a060020a031663ab9f51c1876000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610acb578082015183820152602001610ab3565b50505050905090810190601f168015610af85780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515610b1657600080fd5b6102c65a03f11515610b2757600080fd5b505050604051805190509050610b63602060405190810160405260008152610b57600160a060020a038416612405565b9063ffffffff61188216565b15610b6d57610c6d565b610b7c8284838b8b8b8b612529565b6005805460018101610b8e8382612918565b6000928352602090922001848051610baa92916020019061293c565b5050600254600160a060020a03166358407e58876040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c0d578082015183820152602001610bf5565b50505050905090810190601f168015610c3a5780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1515610c5857600080fd5b6102c65a03f11515610c6957600080fd5b5050505b5050505050505050565b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610cae612906565b600080610cb9612906565b600080610cc4612906565b60055495506000945084861115610ee35760408051908101604052600b8152600080516020612a4283398151915260208201529350600092505b85831015610eb5576004600584815481101515610d1757fe5b90600052602060002090016040518082805460018160011615610100020316600290048015610d7d5780601f10610d5b576101008083540402835291820191610d7d565b820191906000526020600020905b815481529060010190602001808311610d69575b5050928352505060200160405180910390209150610e0289836007018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106405780601f1061061557610100808354040283529160200191610640565b1515610e0d57610eaa565b6003886003811115610e1b57fe5b108015610e455750876003811115610e2f57fe5b600983015460ff166003811115610e4257fe5b14155b15610e4f57610eaa565b6000831115610e8657610e83604080519081016040526001815260fa60020a600b026020820152859063ffffffff611f2916565b93505b610e8f82611918565b9050610ea1848263ffffffff611f2916565b60019095019493505b600190920191610cfe565b610ee0604080519081016040526001815260f860020a605d026020820152859063ffffffff611f2916565b93505b60408051908101604052806001815260200160f860020a607b028152509650610f4961093760408051908101604052600881527f746f74616c4e756d0000000000000000000000000000000000000000000000006020820152879063ffffffff611f9216565b96506000851115610f6757610f64878563ffffffff611f2916565b96505b610f92604080519081016040526001815260f860020a607d026020820152889063ffffffff611f2916565b9998505050505050505050565b600054600160a060020a031690565b610fb6612906565b6000806000610fc3612906565b600554935060408051908101604052806001815260200160f860020a607b02815250945061103b61102e60408051908101604052600881527f746f74616c4e756d0000000000000000000000000000000000000000000000006020820152869063ffffffff611f9216565b869063ffffffff611f2916565b9450600084111561119f5761107860408051908101604052600b8152600080516020612a428339815191526020820152869063ffffffff611f2916565b9450600092505b838310156111715760008311156110be576110bb604080519081016040526001815260fa60020a600b026020820152869063ffffffff611f2916565b94505b60046005848154811015156110cf57fe5b906000526020600020900160405180828054600181600116156101000203166002900480156111355780601f10611113576101008083540402835291820191611135565b820191906000526020600020905b815481529060010190602001808311611121575b505092835250506020016040518091039020915061115282611918565b9050611164858263ffffffff611f2916565b945060019092019161107f565b61119c604080519081016040526001815260f860020a605d026020820152869063ffffffff611f2916565b94505b6111ca604080519081016040526001815260f860020a607d026020820152869063ffffffff611f2916565b94505050505090565b600254600160a060020a031690565b60008054600160a060020a0316638c26314a8383604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561124c578082015183820152602001611234565b50505050905090810190601f1680156112795780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561129757600080fd5b6102c65a03f115156112a857600080fd5b50505060405180519392505050565b600254600090600160a060020a0316637ff9fbb28383604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561124c578082015183820152602001611234565b61132a612906565b600080611335612906565b600080611340612906565b600554955060009450848611156108d15760408051908101604052600b8152600080516020612a4283398151915260208201529350600092505b858310156108a357600460058481548110151561139357fe5b906000526020600020900160405180828054600181600116156101000203166002900480156113f95780601f106113d75761010080835404028352918201916113f9565b820191906000526020600020905b8154815290600101906020018083116113e5575b505092835250506020016040519081900390206003810154909250600160a060020a0389811691161461142b57611486565b60008311156114625761145f604080519081016040526001815260fa60020a600b026020820152859063ffffffff611f2916565b93505b61146b82611918565b905061147d848263ffffffff611f2916565b60019095019493505b60019092019161137a565b611499612906565b6114a1612906565b600080806114b5878763ffffffff611f2916565b94506114c0856121b6565b93506004846040518082805190602001908083835b602083106114f45780518252601f1990920191602091820191016114d5565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209250611532836125d7565b151561153d57611839565b600054600160a060020a03166302f2792b878b60405160e060020a63ffffffff8516028152600160a060020a038216602482015260406004820190815290819060440184818151815260200191508051906020019080838360005b838110156115b0578082015183820152602001611598565b50505050905090810190601f1680156115dd5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15156115fc57600080fd5b6102c65a03f1151561160d57600080fd5b505060008054600160a060020a03169150638c26314a908890604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561167c578082015183820152602001611664565b50505050905090810190601f1680156116a95780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156116c757600080fd5b6102c65a03f115156116d857600080fd5b5050506040518051600254909350600160a060020a03169050637ff9fbb2886000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561174f578082015183820152602001611737565b50505050905090810190601f16801561177c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561179a57600080fd5b6102c65a03f115156117ab57600080fd5b5050506040518051600154909250600160a060020a0316905063beabacc88a848460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561181b57600080fd5b6102c65a03f1151561182c57600080fd5b5050506118398389612605565b505050505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600160a060020a031690565b60008082518451146118975760009150611911565b5060005b835181101561190c578281815181106118b057fe5b016020015160f860020a900460f860020a02600160f860020a0319168482815181106118d857fe5b016020015160f860020a900460f860020a02600160f860020a0319161415156119045760009150611911565b60010161189b565b600191505b5092915050565b611920612906565b611928612906565b60408051908101604052806001815260200160f860020a607b028152509150611a57611a2e6040805190810160405280600a81526020017f65786368616e6765494400000000000000000000000000000000000000000000815250856000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a1b5780601f106119f057610100808354040283529160200191611a1b565b820191906000526020600020905b8154815290600101906020018083116119fe57829003601f168201915b505050505061262e90919063ffffffff16565b604080519081016040526001815260fa60020a600b02602082015284919063ffffffff6127b416565b9150611aa4611a2e60408051908101604052600c81527f65786368616e676554696d650000000000000000000000000000000000000000602082015260018601549063ffffffff611f9216565b915060408051908101604052600280825260f360020a61060f026020830152840154909150611aec90611adf90600160a060020a0316612405565b829063ffffffff611f2916565b9050611b35611a2e60408051908101604052600a81527f66697273745061727479000000000000000000000000000000000000000000006020820152839063ffffffff61262e16565b9150604080519081016040526002815260f360020a61060f0260208201526003840154909150611b7190611adf90600160a060020a0316612405565b9050611bba611a2e60408051908101604052600b81527f7365636f6e6450617274790000000000000000000000000000000000000000006020820152839063ffffffff61262e16565b9150604080519081016040526002815260f360020a61060f0260208201526004840154909150611bf690611adf90600160a060020a0316612405565b9050611c3f611a2e60408051908101604052600981527f7769746e657373657300000000000000000000000000000000000000000000006020820152839063ffffffff61262e16565b9150611cea611a2e6040805190810160405280601181526020017f65786368616e67655369676e6174757265000000000000000000000000000000815250856005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a1b5780601f106119f057610100808354040283529160200191611a1b565b9150611d37611a2e60408051908101604052600581527f616d6f7574000000000000000000000000000000000000000000000000000000602082015260068601549063ffffffff611f9216565b9150611de2611a2e6040805190810160405280601181526020017f64617461526571756972656d656e744944000000000000000000000000000000815250856007018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a1b5780601f106119f057610100808354040283529160200191611a1b565b9150611e8d611a2e6040805190810160405280600b81526020017f6461746141737365744944000000000000000000000000000000000000000000815250856008018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a1b5780601f106119f057610100808354040283529160200191611a1b565b9150611ef5611ee860408051908101604052600681527f73746174757300000000000000000000000000000000000000000000000000006020820152600986015460ff166003811115611edc57fe5b9063ffffffff611f9216565b839063ffffffff611f2916565b9150611f22604080519081016040526001815260f860020a607d026020820152839063ffffffff611f2916565b9392505050565b611f31612906565b60008060008451865101604051805910611f485750595b818152601f19601f830116810160200160405290509350505060208481019150838101908301611f7a81848851612845565b611f8986518201838751612845565b50505092915050565b611f9a612906565b60008060008085516003019350861515611fb957600184019350611fd7565b8692505b6000831115611fd757600a83600190950194049250611fbd565b83604051805910611fe55750595b818152601f19601f8301168101602001604052905094506001915060f960020a6011028560008151811061201557fe5b906020010190600160f860020a031916908160001a905350600090505b855181101561208b5785818151811061204757fe5b016020015160f860020a900460f860020a0285838060010194508151811061206b57fe5b906020010190600160f860020a031916908160001a905350600101612032565b60f960020a6011028583806001019450815181106120a557fe5b906020010190600160f860020a031916908160001a9053507f3a000000000000000000000000000000000000000000000000000000000000008583806001019450815181106120f057fe5b906020010190600160f860020a031916908160001a90535060001984019150861515612160577f300000000000000000000000000000000000000000000000000000000000000085838151811061214357fe5b906020010190600160f860020a031916908160001a9053506121ac565b60008711156121ac5760001982019160f860020a6030600a8a0601029086908151811061218957fe5b906020010190600160f860020a031916908160001a905350600a87049650612160565b5050505092915050565b6121be612906565b6000806000806000866040518082805190602001908083835b602083106121f65780518252601f1990920191602091820191016121d7565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020945060426040518059106122335750595b818152601f19601f8301168101602001604052905095507f30000000000000000000000000000000000000000000000000000000000000008660008151811061227857fe5b906020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000866001815181106122be57fe5b906020010190600160f860020a031916908160001a905350600090505b60208110156123fb578481602081106122f057fe5b60f860020a91901a8102049350601084049250600f84169150600983111561234a5760f860020a6057840102868280016002018151811061232d57fe5b906020010190600160f860020a031916908160001a90535061237e565b8260300160f860020a02868283600201018151811061236557fe5b906020010190600160f860020a031916908160001a9053505b60098211156123bf5760f860020a605783010286600383800101815181106123a257fe5b906020010190600160f860020a031916908160001a9053506123f3565b60f860020a603083010286600383800101815181106123da57fe5b906020010190600160f860020a031916908160001a9053505b6001016122db565b5050505050919050565b61240d612906565b612415612906565b600080600080602860405180591061242a5750595b818152601f19601f830116810160200160405290509450600093505b601484101561251e578360130360080260020a87600160a060020a031681151561246c57fe5b0460f860020a02925060108360f860020a900460ff1681151561248b57fe5b0460f860020a0291508160f860020a90046010028360f860020a90040360f860020a0290506124b98261288a565b8585600202815181106124c857fe5b906020010190600160f860020a031916908160001a9053506124e98161288a565b8585600202600101815181106124fb57fe5b906020010190600160f860020a031916908160001a905350600190930192612446565b509295945050505050565b8686805161253b92916020019061293c565b50426001880155600287018054600160a060020a0380881673ffffffffffffffffffffffffffffffffffffffff199283161790925560038901805487841690831617905560048901805492861692909116919091179055600787018280516125a792916020019061293c565b50600887018180516125bd92916020019061293c565b50505050600993909301805460ff19166001179055505050565b60006001600983015460ff1660038111156125ee57fe5b14156125fc57506001612600565b5060005b919050565b60098201805460ff191660021790556005820181805161262992916020019061293c565b505050565b612636612906565b60008060008085518751016005016040518059106126515750595b818152601f19601f83011681016020016040529050945050506020858101925084810191508301600160f960020a6011028560008151811061268f57fe5b906020010190600160f860020a031916908160001a9053506126b5818301848851612845565b855101600181019060f960020a601102908690815181106126d257fe5b906020010190600160f860020a031916908160001a9053507f3a0000000000000000000000000000000000000000000000000000000000000085828060010193508151811061271d57fe5b906020010190600160f860020a031916908160001a90535060f960020a60110285828060010193508151811061274f57fe5b906020010190600160f860020a031916908160001a905350612775818301858951612845565b865101600181019060f960020a6011029086908151811061279257fe5b906020010190600160f860020a031916908160001a9053505050505092915050565b6127bc612906565b6000806000806000865188518a5101016040518059106127d95750595b818152601f19601f830116810160200160405290509550505060208781019350868101925085810191508401600061281382868b51612845565b885101612824828201858a51612845565b875101612835828201848951612845565b8651509498975050505050505050565b60005b6020821061286b5782518452602084019350602083019250602082039150612848565b6001826020036101000a03905080198351168185511617909352505050565b60007f0a000000000000000000000000000000000000000000000000000000000000007fff00000000000000000000000000000000000000000000000000000000000000831610156128ee578160f860020a900460300160f860020a029050612600565b8160f860020a900460570160f860020a029050612600565b60206040519081016040526000815290565b815481835581811511612629576000838152602090206126299181019083016129ba565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061297d57805160ff19168380011785556129aa565b828001600101855582156129aa579182015b828111156129aa57825182559160200191906001019061298f565b506129b69291506129e0565b5090565b6129dd91905b808211156129b65760006129d482826129fa565b506001016129c0565b90565b6129dd91905b808211156129b657600081556001016129e6565b50805460018160011615610100020316600290046000825580601f10612a205750612a3e565b601f016020900490600052602060002090810190612a3e91906129e0565b5056002c20226974656d73223a5b000000000000000000000000000000000000000000a165627a7a723058208d445ac153a966976f585376dfe4ad75626b9313ae862331aef3e50b8133f0340029";

    public ExchangeManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ExchangeManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> queryDataExchangebyDataExchangeID(String dataExchangeID) {
        Function function = new Function("queryDataExchangebyDataExchangeID", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dataExchangeID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> queryDataExchangebyRequirementRecruiter(String recruiter) {
        Function function = new Function("queryDataExchangebyRequirementRecruiter", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(recruiter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setDataRequirementManagerAddr(String addr) {
        Function function = new Function(
                "setDataRequirementManagerAddr", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addDataExchange(String _secondParty, String _witnessess, String _dataRequirementID, String _dataAssetID) {
        Function function = new Function(
                "addDataExchange", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_secondParty), 
                new org.web3j.abi.datatypes.Address(_witnessess), 
                new org.web3j.abi.datatypes.Utf8String(_dataRequirementID), 
                new org.web3j.abi.datatypes.Utf8String(_dataAssetID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setBTOTokenAddr(String addr) {
        Function function = new Function(
                "setBTOTokenAddr", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> queryDataExchangebyDataRequirementIDAndStatus(String dataRequirementID, BigInteger status) {
        Function function = new Function("queryDataExchangebyDataRequirementIDAndStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(dataRequirementID), 
                new org.web3j.abi.datatypes.generated.Uint8(status)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> queryAIDataAssetRegisterAddr() {
        Function function = new Function("queryAIDataAssetRegisterAddr", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> queryAllDataExchange() {
        Function function = new Function("queryAllDataExchange", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> querytDataRequirementManagerAddr() {
        Function function = new Function("querytDataRequirementManagerAddr", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> queryOwnerbyDataAssetID(String _dataAssetID) {
        Function function = new Function("queryOwnerbyDataAssetID", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_dataAssetID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> queryBidMoneybyRequirementID(String _dataRequirementID) {
        Function function = new Function("queryBidMoneybyRequirementID", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_dataRequirementID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> queryDataExchangebyAssetOwner(String owner) {
        Function function = new Function("queryDataExchangebyAssetOwner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> dataAssetBuy(String _firstParty, String _exchangeSignature, String _dataRequirementID, String _dataAssetID) {
        Function function = new Function(
                "dataAssetBuy", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_firstParty), 
                new org.web3j.abi.datatypes.Utf8String(_exchangeSignature), 
                new org.web3j.abi.datatypes.Utf8String(_dataRequirementID), 
                new org.web3j.abi.datatypes.Utf8String(_dataAssetID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAIDataAssetRegisterAddr(String addr) {
        Function function = new Function(
                "setAIDataAssetRegisterAddr", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> queryBTOTokenAddr() {
        Function function = new Function("queryBTOTokenAddr", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<ExchangeManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ExchangeManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ExchangeManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ExchangeManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static ExchangeManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ExchangeManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ExchangeManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ExchangeManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
